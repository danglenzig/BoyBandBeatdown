[gd_scene load_steps=19 format=3 uid="uid://c17sym1qo6kdr"]

[ext_resource type="Script" path="res://ui/tutorial_sequence/tutorial_sequence_exploration.gd" id="1_ud4kv"]
[ext_resource type="Texture2D" uid="uid://cppecdseuwynr" path="res://encounters/encounter_backgrounds/00.png" id="2_3abnl"]
[ext_resource type="FontFile" uid="uid://baihxtltbmli8" path="res://fonts/VIPNAGORGIALLA RG.OTF" id="3_ptkni"]
[ext_resource type="Texture2D" uid="uid://cibtjuyxs30dq" path="res://ui/tutorial_sequence/walk_example.png" id="4_bbddu"]
[ext_resource type="Texture2D" uid="uid://1pmd51sperqo" path="res://ui/tutorial_sequence/WASD.png" id="5_61iew"]
[ext_resource type="Texture2D" uid="uid://c3iu3qsgd1aac" path="res://ui/tutorial_sequence/_approach_example.png" id="6_04ndd"]
[ext_resource type="Texture2D" uid="uid://dp0kmbnwxppig" path="res://ui/tutorial_sequence/_challenge_example.png" id="7_t4jod"]
[ext_resource type="Texture2D" uid="uid://ccpsfcskisi4d" path="res://ui/tutorial_sequence/left_click.png" id="8_fduvo"]
[ext_resource type="Texture2D" uid="uid://1507g1w3n1gs" path="res://ui/tutorial_sequence/nav_prompts.png" id="9_flrws"]
[ext_resource type="FontFile" uid="uid://dwswy8wy1p2tm" path="res://fonts/VIPNAGORGIALLA BD.OTF" id="9_ppyny"]
[ext_resource type="Texture2D" uid="uid://f7fya0vqb448" path="res://addons/sprite-shader-mixer/assets/shaders/noise/noise3.png" id="10_x3cw1"]
[ext_resource type="Texture2D" uid="uid://dmb4meeq13s85" path="res://ui/circle.png" id="11_2bpw1"]

[sub_resource type="Shader" id="Shader_mrd7f"]
code = "//ATTENTION:
//  THIS IS SHADE AUTOGENERATED BY
//  THE ADDON SPRITE-SHADER-MIXER
//  ANY MANUAL CHANGES WILL BE REMOVED WHEN THE ADDON
//  UPDATES THIS SHADER.
//  ANYWAY, YOU CAN SAVE THE CURRENT VERSION AS A RESOURCE FILE.
//SHADERS:Aura,
shader_type canvas_item;

uniform float opacity:hint_range(0.0, 1.0, 0.01)=1.;

	
//AURA
//AURA
uniform bool AURA_active=true;
uniform float AURA_speedX:hint_range(-1.0, 1.0, 0.001)=0;
uniform float AURA_speedY:hint_range(-1.0, 1.0, 0.001)=0.08;
uniform float AURA_amount:hint_range(0.0, 10.0, 0.1)=2.7;
uniform vec4 AURA_auraColor:source_color=vec4(1.0,1.0,0,1);
uniform float AURA_distanceSaturation:hint_range(0.0, 1.0, 0.01)=0;
uniform float AURA_redDist:hint_range(0.0, 10.0, 0.1)=7.7;
uniform float AURA_greenDist:hint_range(0.0, 10.0, 0.1)=7.9;
uniform float AURA_blueDist:hint_range(0.0, 10.0, 0.1)=0;
uniform sampler2D AURA_noiseTexture:repeat_enable;
uniform float AURA_Y_displacement:hint_range(-1.0, 1.0, 0.001)=0.;
uniform float AURA_X_displacement:hint_range(-1.0, 1.0, 0.001)=0.;
float AURA_fbm( in vec2 p, float noise ) {
    float f = 0.0;
    mat2 m = mat2(vec2(1.6,  1.2), vec2(-1.2,  1.6 ));
    f  = 0.5000*noise; p = m*p;
    f += 0.3500*noise; p = m*p;
    f += 0.1250*noise; p = m*p;
    f += 0.0625*noise; p = m*p;
    f = 0.5 + 0.5 * f;
    return f;
}
void aura(inout vec2 uv, in sampler2D tex, in vec2 spriteSize, in vec2 pixelSize, inout vec4 color) {
	vec2 noiseUV=vec2(uv.x+TIME*AURA_speedX, uv.y+TIME*AURA_speedY);
	vec4 noiseColor=texture(AURA_noiseTexture, noiseUV);

	float calc=-noiseColor.r*AURA_amount*0.01;
	vec2 displacement1=vec2(-calc+AURA_X_displacement,0.+AURA_Y_displacement);
	vec2 displacement2=vec2(calc+AURA_X_displacement,0.+AURA_Y_displacement);
	vec2 displacement3=vec2(0.+AURA_X_displacement,calc+AURA_Y_displacement);
	vec2 displacement4=vec2(0.+AURA_X_displacement,-calc+AURA_Y_displacement);
	vec2 displacement5=vec2(-calc+AURA_X_displacement,-calc+AURA_Y_displacement);
	vec2 displacement6=vec2(calc+AURA_X_displacement,calc+AURA_Y_displacement);
	vec2 displacement7=vec2(calc+AURA_X_displacement,-calc+AURA_Y_displacement);
	vec2 displacement8=vec2(-calc+AURA_X_displacement,calc+AURA_Y_displacement);

	vec4 newColor1 = texture(tex, uv + displacement1);
	vec4 newColor2 = texture(tex, uv + displacement2);
	vec4 newColor3 = texture(tex, uv + displacement3);
	vec4 newColor4 = texture(tex, uv + displacement4);
	vec4 newColor5 = texture(tex, uv + displacement5);
	vec4 newColor6 = texture(tex, uv + displacement6);
	vec4 newColor7 = texture(tex, uv + displacement7);
	vec4 newColor8 = texture(tex, uv + displacement8);

	float distCenter=0.5;
	float timeScale=3.;
	vec2 uvT = (uv * vec2(2.5*AURA_distanceSaturation, 1.0*AURA_distanceSaturation )) + timeScale + TIME * 0.2;
    float n = pow(AURA_fbm(8.0 * uvT, noiseColor.r), 1.0); 
	float gradient = pow(1.0 - uv.y, 2.0) * 5.;
    float finalNoise = n * gradient;
	vec3 fireColor = finalNoise * vec3(2.*n, 2.*n*n*n, n*n*n*n);

	float alpha=newColor1.a+newColor2.a+newColor3.a+newColor4.a+newColor5.a+newColor6.a+newColor7.a+newColor8.a;
	vec3 auraColorDistorted=vec3(AURA_redDist*distCenter+AURA_auraColor.r*distCenter, AURA_greenDist*distCenter+AURA_auraColor.g*distCenter, AURA_blueDist*distCenter+AURA_auraColor.b*distCenter);
	if(color.a<1. && color.a>0.){
		color=mix(color,vec4(auraColorDistorted,alpha),0.5);
	}else if(color.a<=0. && alpha>0.){
		color=vec4(mix(auraColorDistorted,fireColor,AURA_distanceSaturation),1.*(3.-fireColor.r+fireColor.g+fireColor.b));
	}
}


void fragment() {
	vec4 color = texture(TEXTURE, UV);
	vec2 size = vec2(textureSize(TEXTURE, 0));
	vec2 uv = UV;
	vec2 screen_uv = SCREEN_UV;

	if(AURA_active) aura(uv, TEXTURE, size, TEXTURE_PIXEL_SIZE, color);


	color.a*=opacity;
	COLOR=color;
}

void vertex() {
	
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_mvuox"]
shader = SubResource("Shader_mrd7f")
shader_parameter/opacity = 1.0
shader_parameter/AURA_active = true
shader_parameter/AURA_speedX = 0.0
shader_parameter/AURA_speedY = 0.02
shader_parameter/AURA_amount = 2.0
shader_parameter/AURA_auraColor = Color(1, 1, 0, 1)
shader_parameter/AURA_distanceSaturation = 0.0
shader_parameter/AURA_redDist = 7.7
shader_parameter/AURA_greenDist = 7.9
shader_parameter/AURA_blueDist = 0.0
shader_parameter/AURA_Y_displacement = 0.0
shader_parameter/AURA_X_displacement = 0.0
shader_parameter/AURA_noiseTexture = ExtResource("10_x3cw1")

[sub_resource type="Shader" id="Shader_yn8tj"]
code = "//ATTENTION:
//  THIS IS SHADE AUTOGENERATED BY
//  THE ADDON SPRITE-SHADER-MIXER
//  ANY MANUAL CHANGES WILL BE REMOVED WHEN THE ADDON
//  UPDATES THIS SHADER.
//  ANYWAY, YOU CAN SAVE THE CURRENT VERSION AS A RESOURCE FILE.
//SHADERS:
shader_type canvas_item;

uniform float opacity:hint_range(0.0, 1.0, 0.01)=1.;

	

void fragment() {
	vec4 color = texture(TEXTURE, UV);
	vec2 size = vec2(textureSize(TEXTURE, 0));
	vec2 uv = UV;
	vec2 screen_uv = SCREEN_UV;



	color.a*=opacity;
	COLOR=color;
}

void vertex() {
	
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_25oo0"]
shader = SubResource("Shader_yn8tj")
shader_parameter/opacity = 1.0

[sub_resource type="Shader" id="Shader_g7e1j"]
code = "//ATTENTION:
//  THIS IS SHADE AUTOGENERATED BY
//  THE ADDON SPRITE-SHADER-MIXER
//  ANY MANUAL CHANGES WILL BE REMOVED WHEN THE ADDON
//  UPDATES THIS SHADER.
//  ANYWAY, YOU CAN SAVE THE CURRENT VERSION AS A RESOURCE FILE.
//SHADERS:Color Swap Hue,Aura,
shader_type canvas_item;

uniform float opacity:hint_range(0.0, 1.0, 0.01)=1.;

	
uniform bool COLORSWAPHUE_active = true;
uniform vec4 COLORSWAPHUE_from : source_color=vec4(0,0,1,1);
uniform vec4 COLORSWAPHUE_to : source_color=vec4(1,0,0,1);
uniform float COLORSWAPHUE_tolerance: hint_range(0.0, 1.0)=1.0;
vec3 COLORSWAPHUE_rgb2hsv(vec3 c)
{
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}
vec3 COLORSWAPHUE_hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}
void colorSwapHue(in vec2 uv, in sampler2D txt, in vec2 size, in vec2 pixelSize, inout vec4 color)
{
	// we usually want more granularity the closer we are to the original color
	float _tol = COLORSWAPHUE_tolerance * COLORSWAPHUE_tolerance;
	
	vec3 source_hsv = COLORSWAPHUE_rgb2hsv(color.rgb);
	vec3 initial_hsv = COLORSWAPHUE_rgb2hsv(COLORSWAPHUE_from.rgb);
	vec3 hsv_shift = COLORSWAPHUE_rgb2hsv(COLORSWAPHUE_to.rgb) - initial_hsv;
	
	float hue = initial_hsv.r;
	
	// the .r here represents HUE, .g is SATURATION, .b is LUMINANCE
	if (hue - source_hsv.r >= -_tol && hue - source_hsv.r <= +_tol)
	{
		vec3 final_hsv = source_hsv + hsv_shift;
		color.rgb = COLORSWAPHUE_hsv2rgb(final_hsv);
	}	
}
//AURA
//AURA
uniform bool AURA_active=true;
uniform float AURA_speedX:hint_range(-1.0, 1.0, 0.001)=0;
uniform float AURA_speedY:hint_range(-1.0, 1.0, 0.001)=0.08;
uniform float AURA_amount:hint_range(0.0, 10.0, 0.1)=2.7;
uniform vec4 AURA_auraColor:source_color=vec4(1.0,1.0,0,1);
uniform float AURA_distanceSaturation:hint_range(0.0, 1.0, 0.01)=0;
uniform float AURA_redDist:hint_range(0.0, 10.0, 0.1)=7.7;
uniform float AURA_greenDist:hint_range(0.0, 10.0, 0.1)=7.9;
uniform float AURA_blueDist:hint_range(0.0, 10.0, 0.1)=0;
uniform sampler2D AURA_noiseTexture:repeat_enable;
uniform float AURA_Y_displacement:hint_range(-1.0, 1.0, 0.001)=0.;
uniform float AURA_X_displacement:hint_range(-1.0, 1.0, 0.001)=0.;
float AURA_fbm( in vec2 p, float noise ) {
    float f = 0.0;
    mat2 m = mat2(vec2(1.6,  1.2), vec2(-1.2,  1.6 ));
    f  = 0.5000*noise; p = m*p;
    f += 0.3500*noise; p = m*p;
    f += 0.1250*noise; p = m*p;
    f += 0.0625*noise; p = m*p;
    f = 0.5 + 0.5 * f;
    return f;
}
void aura(inout vec2 uv, in sampler2D tex, in vec2 spriteSize, in vec2 pixelSize, inout vec4 color) {
	vec2 noiseUV=vec2(uv.x+TIME*AURA_speedX, uv.y+TIME*AURA_speedY);
	vec4 noiseColor=texture(AURA_noiseTexture, noiseUV);

	float calc=-noiseColor.r*AURA_amount*0.01;
	vec2 displacement1=vec2(-calc+AURA_X_displacement,0.+AURA_Y_displacement);
	vec2 displacement2=vec2(calc+AURA_X_displacement,0.+AURA_Y_displacement);
	vec2 displacement3=vec2(0.+AURA_X_displacement,calc+AURA_Y_displacement);
	vec2 displacement4=vec2(0.+AURA_X_displacement,-calc+AURA_Y_displacement);
	vec2 displacement5=vec2(-calc+AURA_X_displacement,-calc+AURA_Y_displacement);
	vec2 displacement6=vec2(calc+AURA_X_displacement,calc+AURA_Y_displacement);
	vec2 displacement7=vec2(calc+AURA_X_displacement,-calc+AURA_Y_displacement);
	vec2 displacement8=vec2(-calc+AURA_X_displacement,calc+AURA_Y_displacement);

	vec4 newColor1 = texture(tex, uv + displacement1);
	vec4 newColor2 = texture(tex, uv + displacement2);
	vec4 newColor3 = texture(tex, uv + displacement3);
	vec4 newColor4 = texture(tex, uv + displacement4);
	vec4 newColor5 = texture(tex, uv + displacement5);
	vec4 newColor6 = texture(tex, uv + displacement6);
	vec4 newColor7 = texture(tex, uv + displacement7);
	vec4 newColor8 = texture(tex, uv + displacement8);

	float distCenter=0.5;
	float timeScale=3.;
	vec2 uvT = (uv * vec2(2.5*AURA_distanceSaturation, 1.0*AURA_distanceSaturation )) + timeScale + TIME * 0.2;
    float n = pow(AURA_fbm(8.0 * uvT, noiseColor.r), 1.0); 
	float gradient = pow(1.0 - uv.y, 2.0) * 5.;
    float finalNoise = n * gradient;
	vec3 fireColor = finalNoise * vec3(2.*n, 2.*n*n*n, n*n*n*n);

	float alpha=newColor1.a+newColor2.a+newColor3.a+newColor4.a+newColor5.a+newColor6.a+newColor7.a+newColor8.a;
	vec3 auraColorDistorted=vec3(AURA_redDist*distCenter+AURA_auraColor.r*distCenter, AURA_greenDist*distCenter+AURA_auraColor.g*distCenter, AURA_blueDist*distCenter+AURA_auraColor.b*distCenter);
	if(color.a<1. && color.a>0.){
		color=mix(color,vec4(auraColorDistorted,alpha),0.5);
	}else if(color.a<=0. && alpha>0.){
		color=vec4(mix(auraColorDistorted,fireColor,AURA_distanceSaturation),1.*(3.-fireColor.r+fireColor.g+fireColor.b));
	}
}


void fragment() {
	vec4 color = texture(TEXTURE, UV);
	vec2 size = vec2(textureSize(TEXTURE, 0));
	vec2 uv = UV;
	vec2 screen_uv = SCREEN_UV;

	if(COLORSWAPHUE_active) colorSwapHue(uv, TEXTURE, size, TEXTURE_PIXEL_SIZE, color);
	if(AURA_active) aura(uv, TEXTURE, size, TEXTURE_PIXEL_SIZE, color);


	color.a*=opacity;
	COLOR=color;
}

void vertex() {
	
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_qshiq"]
shader = SubResource("Shader_g7e1j")
shader_parameter/opacity = 1.0
shader_parameter/COLORSWAPHUE_active = true
shader_parameter/COLORSWAPHUE_from = Color(1, 1, 1, 1)
shader_parameter/COLORSWAPHUE_to = Color(1, 0, 0, 1)
shader_parameter/COLORSWAPHUE_tolerance = 1.0
shader_parameter/AURA_active = true
shader_parameter/AURA_speedX = 0.0
shader_parameter/AURA_speedY = 0.01
shader_parameter/AURA_amount = 1.0
shader_parameter/AURA_auraColor = Color(1, 1, 0, 1)
shader_parameter/AURA_distanceSaturation = 0.0
shader_parameter/AURA_redDist = 7.7
shader_parameter/AURA_greenDist = 7.9
shader_parameter/AURA_blueDist = 0.0
shader_parameter/AURA_Y_displacement = 0.0
shader_parameter/AURA_X_displacement = 0.0
shader_parameter/AURA_noiseTexture = ExtResource("10_x3cw1")

[node name="TutorialSequenceExploration" type="Node2D"]
script = ExtResource("1_ud4kv")

[node name="TextureRect" type="TextureRect" parent="."]
self_modulate = Color(1, 1, 1, 0.156863)
offset_right = 1920.0
offset_bottom = 1080.0
texture = ExtResource("2_3abnl")

[node name="RootPanel" type="Panel" parent="."]
self_modulate = Color(1, 1, 1, 0)
offset_right = 1366.0
offset_bottom = 750.0

[node name="CaptionsPanel" type="Panel" parent="RootPanel"]
self_modulate = Color(1, 1, 1, 0)
layout_mode = 1
anchors_preset = 7
anchor_left = 0.5
anchor_top = 1.0
anchor_right = 0.5
anchor_bottom = 1.0
offset_left = -683.0
offset_top = -103.0
offset_right = 683.0
offset_bottom = -3.0
grow_horizontal = 2
grow_vertical = 0

[node name="Step0" type="Label" parent="RootPanel/CaptionsPanel"]
layout_mode = 1
anchors_preset = 5
anchor_left = 0.5
anchor_right = 0.5
offset_left = -517.5
offset_right = 516.5
offset_bottom = 100.0
grow_horizontal = 2
theme_override_colors/font_color = Color(1, 1, 0, 1)
theme_override_colors/font_shadow_color = Color(0, 0, 0, 1)
theme_override_colors/font_outline_color = Color(0, 0, 0, 1)
theme_override_constants/shadow_offset_x = 2
theme_override_constants/shadow_offset_y = 2
theme_override_constants/outline_size = 1
theme_override_fonts/font = ExtResource("3_ptkni")
theme_override_font_sizes/font_size = 20
text = "Use WASD to move around and explore your new school."
horizontal_alignment = 1
vertical_alignment = 1
autowrap_mode = 3

[node name="Step1" type="Label" parent="RootPanel/CaptionsPanel"]
visible = false
layout_mode = 1
anchors_preset = 5
anchor_left = 0.5
anchor_right = 0.5
offset_left = -517.5
offset_right = 516.5
offset_bottom = 100.0
grow_horizontal = 2
theme_override_colors/font_color = Color(1, 1, 0, 1)
theme_override_colors/font_shadow_color = Color(0, 0, 0, 1)
theme_override_colors/font_outline_color = Color(0, 0, 0, 1)
theme_override_constants/shadow_offset_x = 2
theme_override_constants/shadow_offset_y = 2
theme_override_constants/outline_size = 1
theme_override_fonts/font = ExtResource("3_ptkni")
theme_override_font_sizes/font_size = 20
text = "Approach an opponent to challenge them to a match."
horizontal_alignment = 1
vertical_alignment = 1
autowrap_mode = 3

[node name="Step2" type="Label" parent="RootPanel/CaptionsPanel"]
visible = false
layout_mode = 1
anchors_preset = 5
anchor_left = 0.5
anchor_right = 0.5
offset_left = -517.5
offset_right = 516.5
offset_bottom = 100.0
grow_horizontal = 2
theme_override_colors/font_color = Color(1, 1, 0, 1)
theme_override_colors/font_shadow_color = Color(0, 0, 0, 1)
theme_override_colors/font_outline_color = Color(0, 0, 0, 1)
theme_override_constants/shadow_offset_x = 2
theme_override_constants/shadow_offset_y = 2
theme_override_constants/outline_size = 1
theme_override_fonts/font = ExtResource("3_ptkni")
theme_override_font_sizes/font_size = 20
text = "Click \"Navigation Prompts\" do display exit points"
horizontal_alignment = 1
vertical_alignment = 1
autowrap_mode = 3

[node name="DiagramStep0" type="Node2D" parent="RootPanel"]

[node name="ColorRect" type="ColorRect" parent="RootPanel/DiagramStep0"]
offset_left = 197.0
offset_top = 48.0
offset_right = 1169.0
offset_bottom = 601.0

[node name="BackgroundSprite" type="Sprite2D" parent="RootPanel/DiagramStep0"]
position = Vector2(683, 325)
scale = Vector2(0.75, 0.75)
texture = ExtResource("4_bbddu")

[node name="WASDPanel" type="Panel" parent="RootPanel/DiagramStep0/BackgroundSprite"]
self_modulate = Color(0, 0, 1, 0)
offset_left = 153.333
offset_top = -20.0
offset_right = 536.333
offset_bottom = 249.0

[node name="Sprite2D" type="Sprite2D" parent="RootPanel/DiagramStep0/BackgroundSprite/WASDPanel"]
material = SubResource("ShaderMaterial_mvuox")
position = Vector2(190.333, 133)
scale = Vector2(0.333333, 0.333333)
texture = ExtResource("5_61iew")

[node name="DiagramStep1" type="Node2D" parent="RootPanel"]
visible = false

[node name="ColorRect2" type="ColorRect" parent="RootPanel/DiagramStep1"]
offset_left = 197.0
offset_top = 48.0
offset_right = 1169.0
offset_bottom = 601.0

[node name="ApproachSprite" type="Sprite2D" parent="RootPanel/DiagramStep1"]
visible = false
position = Vector2(683, 325)
scale = Vector2(0.75, 0.75)
texture = ExtResource("6_04ndd")

[node name="ChallengeSprite" type="Sprite2D" parent="RootPanel/DiagramStep1"]
material = SubResource("ShaderMaterial_25oo0")
position = Vector2(683, 325)
scale = Vector2(0.75, 0.75)
texture = ExtResource("7_t4jod")

[node name="LeftClickPanel" type="Panel" parent="RootPanel/DiagramStep1/ChallengeSprite"]
visible = false
self_modulate = Color(0, 0, 1, 1)
offset_left = 192.0
offset_top = -112.0
offset_right = 326.0
offset_bottom = 66.0

[node name="LeftClickSprite" type="Sprite2D" parent="RootPanel/DiagramStep1/ChallengeSprite/LeftClickPanel"]
position = Vector2(68, 90)
scale = Vector2(0.2, 0.2)
texture = ExtResource("8_fduvo")

[node name="DiagramStep2" type="Node2D" parent="RootPanel"]
visible = false

[node name="ColorRect3" type="ColorRect" parent="RootPanel/DiagramStep2"]
offset_left = 197.0
offset_top = 48.0
offset_right = 1169.0
offset_bottom = 601.0

[node name="NavPromptsSprite" type="Sprite2D" parent="RootPanel/DiagramStep2"]
position = Vector2(683, 325)
scale = Vector2(0.75, 0.75)
texture = ExtResource("9_flrws")

[node name="Circle" type="Sprite2D" parent="RootPanel/DiagramStep2"]
material = SubResource("ShaderMaterial_qshiq")
position = Vector2(1086, 91)
scale = Vector2(0.1, 0.1)
texture = ExtResource("11_2bpw1")

[node name="ContinueButton" type="Button" parent="RootPanel"]
visible = false
layout_mode = 0
offset_left = 1210.0
offset_top = 677.0
offset_right = 1341.0
offset_bottom = 710.0
theme_override_colors/font_color = Color(1, 1, 0, 1)
theme_override_colors/font_outline_color = Color(0, 0, 0, 1)
theme_override_constants/outline_size = 1
theme_override_fonts/font = ExtResource("9_ppyny")
theme_override_font_sizes/font_size = 16
text = "Continue"

[node name="NextTabButton" type="Button" parent="RootPanel"]
visible = false
layout_mode = 0
offset_left = 1210.0
offset_top = 677.0
offset_right = 1341.0
offset_bottom = 710.0
theme_override_colors/font_color = Color(1, 1, 0, 1)
theme_override_colors/font_outline_color = Color(0, 0, 0, 1)
theme_override_constants/outline_size = 1
theme_override_fonts/font = ExtResource("9_ppyny")
theme_override_font_sizes/font_size = 16
text = "Encounters
->"

[connection signal="mouse_entered" from="RootPanel/ContinueButton" to="." method="play_hover_sound"]
[connection signal="pressed" from="RootPanel/ContinueButton" to="." method="_on_continue_button_pressed"]
[connection signal="mouse_entered" from="RootPanel/NextTabButton" to="." method="play_hover_sound"]
[connection signal="pressed" from="RootPanel/NextTabButton" to="." method="_on_next_tab_button_pressed"]
