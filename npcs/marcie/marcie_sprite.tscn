[gd_scene load_steps=39 format=3 uid="uid://draw6d8dxgu4k"]

[ext_resource type="Script" path="res://npcs/npc_sprite.gd" id="2_0fk45"]
[ext_resource type="Texture2D" uid="uid://dstkxjdwmn6jw" path="res://npcs/new_idles/marcie_new_idle_01.png" id="2_1trk3"]
[ext_resource type="FontFile" uid="uid://dwswy8wy1p2tm" path="res://fonts/VIPNAGORGIALLA BD.OTF" id="3_yfalk"]
[ext_resource type="Texture2D" uid="uid://bbxisq78dubt8" path="res://npcs/new_idles/marcie_new_idle_03.png" id="3_yoivx"]
[ext_resource type="Texture2D" uid="uid://1fdurnarg2ho" path="res://npcs/new_idles/marcie_new_idle_05.png" id="4_g15tb"]
[ext_resource type="Script" path="res://dialogue/npc_dialogue.gd" id="4_yejwd"]
[ext_resource type="Texture2D" uid="uid://bwh8o74buce6s" path="res://npcs/new_idles/marcie_new_idle_07.png" id="5_t7bsm"]
[ext_resource type="Texture2D" uid="uid://bojbenr6brib6" path="res://npcs/new_idles/marcie_new_idle_09.png" id="6_cei2y"]
[ext_resource type="Texture2D" uid="uid://bswe4yvqvqupk" path="res://npcs/new_idles/marcie_new_idle_11.png" id="7_6xjes"]
[ext_resource type="Texture2D" uid="uid://dive6u0t8vmyx" path="res://npcs/new_idles/marcie_new_idle_13.png" id="8_85yho"]
[ext_resource type="Texture2D" uid="uid://bkwjsm2c0ox54" path="res://npcs/new_idles/marcie_new_idle_15.png" id="9_i1jdr"]
[ext_resource type="Texture2D" uid="uid://cyx48ftgmeo1n" path="res://npcs/new_idles/marcie_new_idle_17.png" id="10_eqvo5"]
[ext_resource type="Texture2D" uid="uid://di7xr7nykxpdx" path="res://npcs/new_idles/marcie_new_idle_19.png" id="11_spnco"]
[ext_resource type="Texture2D" uid="uid://l7fm68g5keed" path="res://npcs/new_idles/marcie_new_idle_21.png" id="12_47kgs"]
[ext_resource type="Texture2D" uid="uid://basdcei3lwsqp" path="res://npcs/new_idles/marcie_new_idle_23.png" id="13_qnjjt"]
[ext_resource type="Texture2D" uid="uid://ooy4kgqx86xj" path="res://npcs/new_idles/marcie_new_idle_25.png" id="14_i2om1"]
[ext_resource type="Texture2D" uid="uid://dnw2uw7egyu2d" path="res://npcs/new_idles/marcie_new_idle_27.png" id="15_yt5ef"]
[ext_resource type="Texture2D" uid="uid://dyv6k6pt8lt31" path="res://npcs/new_idles/marcie_new_idle_29.png" id="16_j4y1r"]
[ext_resource type="Texture2D" uid="uid://dndakcwxld5v5" path="res://npcs/new_idles/marcie_new_idle_31.png" id="17_os5h1"]
[ext_resource type="Texture2D" uid="uid://crwgjcyegyifp" path="res://npcs/new_idles/marcie_new_idle_33.png" id="18_sr5b8"]
[ext_resource type="Texture2D" uid="uid://cvpccid54pss3" path="res://npcs/new_idles/marcie_new_idle_35.png" id="19_u8s4f"]
[ext_resource type="Texture2D" uid="uid://m6suueo63gu7" path="res://npcs/new_idles/marcie_new_idle_37.png" id="20_fht7w"]
[ext_resource type="Texture2D" uid="uid://bce5mq6a8xq6c" path="res://npcs/new_idles/marcie_new_idle_39.png" id="21_teqat"]
[ext_resource type="Texture2D" uid="uid://ch81h6o3ykixa" path="res://npcs/new_idles/marcie_new_idle_41.png" id="22_5omlo"]
[ext_resource type="Texture2D" uid="uid://bd6ais1u0u6ds" path="res://npcs/new_idles/marcie_new_idle_43.png" id="23_ta1ce"]
[ext_resource type="Texture2D" uid="uid://dr7mq27445y20" path="res://npcs/new_idles/marcie_new_idle_45.png" id="24_vlvb6"]
[ext_resource type="Texture2D" uid="uid://cy32djmvpkjrb" path="res://npcs/new_idles/marcie_new_idle_47.png" id="25_qfycu"]
[ext_resource type="Texture2D" uid="uid://c1lgtxmftfmbj" path="res://npcs/new_idles/marcie_new_idle_49.png" id="26_yf826"]
[ext_resource type="Texture2D" uid="uid://djfrr5is8tr8m" path="res://npcs/new_idles/marcie_new_idle_51.png" id="27_agx5j"]
[ext_resource type="Texture2D" uid="uid://nsat2vfc6bwd" path="res://npcs/new_idles/marcie_new_idle_53.png" id="28_jivmv"]
[ext_resource type="Texture2D" uid="uid://c2irobn2e6g5j" path="res://npcs/new_idles/marcie_new_idle_55.png" id="29_uosiw"]
[ext_resource type="Texture2D" uid="uid://b0neenbc34q00" path="res://npcs/new_idles/marcie_new_idle_57.png" id="30_r5rso"]
[ext_resource type="Texture2D" uid="uid://cr3qkplvp88bk" path="res://npcs/new_idles/marcie_new_idle_59.png" id="31_qe41b"]
[ext_resource type="Texture2D" uid="uid://mp0scbdufy4t" path="res://npcs/new_idles/marcie_new_idle_61.png" id="32_w28rw"]

[sub_resource type="Shader" id="Shader_ulj4k"]
code = "//ATTENTION:
//  THIS IS SHADE AUTOGENERATED BY
//  THE ADDON SPRITE-SHADER-MIXER
//  ANY MANUAL CHANGES WILL BE REMOVED WHEN THE ADDON
//  UPDATES THIS SHADER.
//  ANYWAY, YOU CAN SAVE THE CURRENT VERSION AS A RESOURCE FILE.
//SHADERS:Color Manipulator,Outline,Border Noise,Shadow,
shader_type canvas_item;

uniform float opacity:hint_range(0.0, 1.0, 0.01)=1.;

	
//COLORMANIPULATOR
uniform bool COLORMANIPULATOR_active = true;
uniform float COLORMANIPULATOR_brightness : hint_range(-1, 1) = -1.0;
uniform float COLORMANIPULATOR_contrast : hint_range(0, 3) = 3.0;
uniform float COLORMANIPULATOR_saturation : hint_range(0, 3) = 3.0;
uniform float COLORMANIPULATOR_redVal : hint_range(0, 1) = 1.0;
uniform float COLORMANIPULATOR_greenVal : hint_range(0, 1) = 0.5;
uniform float COLORMANIPULATOR_blueVal : hint_range(0, 1) = 1.0;
uniform vec4 COLORMANIPULATOR_tint_color : source_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform float COLORMANIPULATOR_tint_effect_factor : hint_range(0, 1) = 0.0;
//---------------------------------------------
//CONTRAST
//---------------------------------------------
mat4 COLORMANIPULATOR_contrastMatrix( float _contrast ){
	float t = ( 1.0 - _contrast ) / 2.0;
    return mat4( 
		vec4(_contrast, 0, 0, 0),
		vec4(0, _contrast, 0, 0),
		vec4(0, 0, _contrast, 0),
		vec4(t, t, t, 1));
}
//---------------------------------------------
//BRIGHTNESS
//---------------------------------------------
mat4 COLORMANIPULATOR_brightnessMatrix( float _brightness ){
    return mat4( vec4(1, 0, 0, 0),
                 vec4(0, 1, 0, 0),
                 vec4(0, 0, 1, 0),
                 vec4(_brightness, _brightness, _brightness, 1));
}
//---------------------------------------------
//SATURATION
//---------------------------------------------
mat4 COLORMANIPULATOR_saturationMatrix( float _saturation ){
    vec3 luminance = vec3( 0.3086, 0.6094, 0.0820 );
    float oneMinusSat = 1.0 - _saturation;
	
    vec3 red = vec3( luminance.x * oneMinusSat );
    red+= vec3(_saturation, 0, 0)*COLORMANIPULATOR_redVal;
    vec3 green = vec3( luminance.y * oneMinusSat );
    green += vec3( 0,_saturation, 0 )*COLORMANIPULATOR_greenVal;
    vec3 blue = vec3( luminance.z * oneMinusSat );
    blue += vec3( 0, 0,_saturation )*COLORMANIPULATOR_blueVal;
	
    return mat4(vec4(red, 0),vec4(green,0),vec4(blue,0),vec4(0, 0, 0, 1));
}
void colorManipulator(in vec2 uv, in sampler2D sampler, vec2 size, vec2 pixelSize, inout vec4 color){
	vec4 c2 = color * COLORMANIPULATOR_tint_color;
	color = COLORMANIPULATOR_brightnessMatrix( COLORMANIPULATOR_brightness ) * COLORMANIPULATOR_contrastMatrix( COLORMANIPULATOR_contrast ) * COLORMANIPULATOR_saturationMatrix( COLORMANIPULATOR_saturation ) * mix(color, c2, COLORMANIPULATOR_tint_effect_factor);
}
//OUTLINE
uniform bool  OUTLINE_active  = true;
uniform float OUTLINE_thickness : hint_range(0, 30) = 20.0;
uniform vec4  OUTLINE_color : source_color = vec4(1,0,0,1);
void outline(in vec2 uv, in sampler2D tex, in vec2 spriteSize, in vec2 pixelSize, inout vec4 color) {
    vec2 size = vec2(OUTLINE_thickness) / spriteSize;
	   
    float alpha = color.a;
    alpha += texture(tex, uv + vec2(0.0, -size.y)).a;
    alpha += texture(tex, uv + vec2(size.x, -size.y)).a;
    alpha += texture(tex, uv + vec2(size.x, 0.0)).a;
    alpha += texture(tex, uv + vec2(size.x, size.y)).a;
    alpha += texture(tex, uv + vec2(0.0, size.y)).a;
    alpha += texture(tex, uv + vec2(-size.x, size.y)).a;
    alpha += texture(tex, uv + vec2(-size.x, 0.0)).a;
    alpha += texture(tex, uv + vec2(-size.x, -size.y)).a;
   
    vec3 final_color = mix(OUTLINE_color.rgb, color.rgb, color.a);
    color = vec4(final_color, clamp(alpha, 0.0, 1.0));
}
uniform bool BORDERNOISE_active = true;
uniform float BORDERNOISE_max_line_width:hint_range(0.0, 50.0, 0.1) = 10.0;
uniform float BORDERNOISE_min_line_width:hint_range(0.0, 1000.0, 0.1) = 88.0;
uniform float BORDERNOISE_freq:hint_range(0.0, 12.0, 0.1) = 1.0;
uniform float BORDERNOISE_block_size:hint_range(0.0, 100.0, 0.1) = 20.0;
uniform vec4 BORDERNOISE_starting_colour : source_color= vec4(0,0,0,1);
uniform vec4 BORDERNOISE_ending_colour: source_color = vec4(1,0,0,1);
const float BORDERNOISE_pi = 3.1415;
const int BORDERNOISE_ang_res = 16;
const int BORDERNOISE_grad_res = 8;
float BORDERNOISE_hash(vec2 p, float s) {
	return fract(35.1 * sin(dot(vec3(112.3, 459.2, 753.2), vec3(p, s))));
}
float BORDERNOISE_noise(vec2 p, float s) {
	vec2 d = vec2(0, 1)*sin(TIME);
	vec2 b = floor(p)*sin(TIME);
	vec2 f = fract(p);
	return mix(
		mix(BORDERNOISE_hash(b + d.xx, s), BORDERNOISE_hash(b + d.yx, s), f.x),
		mix(BORDERNOISE_hash(b + d.xy, s), BORDERNOISE_hash(b + d.yy, s), f.x), f.y);
}
float BORDERNOISE_getLineWidth(vec2 p, float s) {
	p /= BORDERNOISE_block_size;
	float w = 0.0;
	float intensity = 1.0;
	for (int i = 0; i < 3; i++) {
		w = mix(w, BORDERNOISE_noise(p, s), intensity);
		p /= 2.0;
		intensity /= 2.0;
	}
	
	return mix(BORDERNOISE_max_line_width, BORDERNOISE_min_line_width, w);
}
bool BORDERNOISE_pixelInRange(sampler2D text, vec2 uv, vec2 dist) {
	float alpha = 0.0;
	for (int i = 0; i < BORDERNOISE_ang_res; i++) {
		float angle = 2.0 * BORDERNOISE_pi * float(i) / float(BORDERNOISE_ang_res);
		vec2 disp = dist * vec2(cos(angle), sin(angle));
		if (texture(text, uv + disp).a > 0.0) return true;
	}
	return false;
}
float BORDERNOISE_getClosestDistance(sampler2D text, vec2 uv, vec2 maxDist) {
	if (!BORDERNOISE_pixelInRange(text, uv, maxDist)) return -1.0;
	
	float hi = 1.0; float lo = 0.0;
	
	for (int i = 1; i <= BORDERNOISE_grad_res; i++) {
		float curr = (hi + lo) / 2.0;
		if (BORDERNOISE_pixelInRange(text, uv, curr * maxDist)) {
			hi = curr;
		}
		else {
			lo = curr;
		}
	}
	return hi;
	
}
void borderNoise(in vec2 uv, in sampler2D txt, vec2 size, vec2 pixelSize, inout vec4 color){
	float timeStep = floor(BORDERNOISE_freq * TIME);
	vec2 scaledDist = pixelSize;
	scaledDist *= BORDERNOISE_getLineWidth(uv / pixelSize, timeStep);
	float w = BORDERNOISE_getClosestDistance(txt, uv, scaledDist);
	
	if (( w > 0.0) && (texture(txt, uv).a < 0.2)) {
		color = mix(BORDERNOISE_starting_colour, BORDERNOISE_ending_colour, tanh(3.0*w));
	}
}
//SHADOW
uniform bool  SHADOW_active  = true;
uniform vec2  SHADOW_deform = vec2(0.0, 0.0);
uniform vec2  SHADOW_offset = vec2(20.0, 20.0);
uniform vec4  SHADOW_modulate : source_color;
uniform float SHADOW_mix : hint_range(0,1) = 0;
void shadow(in vec2 uv, in sampler2D txt, in vec2 size, in vec2 texturePixelSize, inout vec4 color) {
	float sizex = float(textureSize(txt,int(texturePixelSize.x)).x); //comment for GLES2
	float sizey = float(textureSize(txt,int(texturePixelSize.y)).y); //comment for GLES2
	//float sizex = texture_size.x; //uncomment for GLES2
	//float sizey = texture_size.y; //uncomment for GLES2
	uv.y+=SHADOW_offset.y*texturePixelSize.y;
	uv.x+=SHADOW_offset.x*texturePixelSize.x;
	float decalx=((uv.y-texturePixelSize.x*sizex)*SHADOW_deform.x);
	float decaly=((uv.y-texturePixelSize.y*sizey)*SHADOW_deform.y);
	uv.x += decalx;
	uv.y += decaly;
	vec4 shadow = vec4(SHADOW_modulate.rgb, texture(txt, uv).a * SHADOW_modulate.a * 0.5);
	color =mix(mix(shadow, color, color.a), color, SHADOW_mix);
}


void fragment() {
	vec4 color = texture(TEXTURE, UV);
	vec2 size = vec2(textureSize(TEXTURE, 0));
	vec2 uv = UV;
	vec2 screen_uv = SCREEN_UV;

	if(COLORMANIPULATOR_active) colorManipulator(uv, TEXTURE, size, TEXTURE_PIXEL_SIZE, color);
	if(OUTLINE_active) outline(uv, TEXTURE, size, TEXTURE_PIXEL_SIZE, color);
	if(BORDERNOISE_active) borderNoise(uv, TEXTURE, size, TEXTURE_PIXEL_SIZE, color);
	if(SHADOW_active) shadow(uv, TEXTURE, size, TEXTURE_PIXEL_SIZE, color);


	color.a*=opacity;
	COLOR=color;
}

void vertex() {
	
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_l6sjs"]
shader = SubResource("Shader_ulj4k")
shader_parameter/opacity = 1.0
shader_parameter/COLORMANIPULATOR_active = true
shader_parameter/COLORMANIPULATOR_brightness = -0.075
shader_parameter/COLORMANIPULATOR_contrast = 1.5
shader_parameter/COLORMANIPULATOR_saturation = 1.0
shader_parameter/COLORMANIPULATOR_redVal = 1.0
shader_parameter/COLORMANIPULATOR_greenVal = 1.0
shader_parameter/COLORMANIPULATOR_blueVal = 1.0
shader_parameter/COLORMANIPULATOR_tint_color = Color(1, 1, 1, 1)
shader_parameter/COLORMANIPULATOR_tint_effect_factor = 0.0
shader_parameter/OUTLINE_active = true
shader_parameter/OUTLINE_thickness = 1.5
shader_parameter/OUTLINE_color = Color(0, 0, 0, 1)
shader_parameter/BORDERNOISE_active = true
shader_parameter/BORDERNOISE_max_line_width = 10.0
shader_parameter/BORDERNOISE_min_line_width = 3.1
shader_parameter/BORDERNOISE_freq = 1.0
shader_parameter/BORDERNOISE_block_size = 0.1
shader_parameter/BORDERNOISE_starting_colour = Color(0, 0, 0, 1)
shader_parameter/BORDERNOISE_ending_colour = Color(1, 1, 0, 1)
shader_parameter/SHADOW_active = true
shader_parameter/SHADOW_deform = Vector2(0, 10)
shader_parameter/SHADOW_offset = Vector2(5, 95)
shader_parameter/SHADOW_modulate = null
shader_parameter/SHADOW_mix = 0.66

[sub_resource type="SpriteFrames" id="SpriteFrames_3lblo"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": ExtResource("2_1trk3")
}, {
"duration": 1.0,
"texture": ExtResource("3_yoivx")
}, {
"duration": 1.0,
"texture": ExtResource("4_g15tb")
}, {
"duration": 1.0,
"texture": ExtResource("5_t7bsm")
}, {
"duration": 1.0,
"texture": ExtResource("6_cei2y")
}, {
"duration": 1.0,
"texture": ExtResource("7_6xjes")
}, {
"duration": 1.0,
"texture": ExtResource("8_85yho")
}, {
"duration": 1.0,
"texture": ExtResource("9_i1jdr")
}, {
"duration": 1.0,
"texture": ExtResource("10_eqvo5")
}, {
"duration": 1.0,
"texture": ExtResource("11_spnco")
}, {
"duration": 1.0,
"texture": ExtResource("12_47kgs")
}, {
"duration": 1.0,
"texture": ExtResource("13_qnjjt")
}, {
"duration": 1.0,
"texture": ExtResource("14_i2om1")
}, {
"duration": 1.0,
"texture": ExtResource("15_yt5ef")
}, {
"duration": 1.0,
"texture": ExtResource("16_j4y1r")
}, {
"duration": 1.0,
"texture": ExtResource("17_os5h1")
}, {
"duration": 1.0,
"texture": ExtResource("18_sr5b8")
}, {
"duration": 1.0,
"texture": ExtResource("19_u8s4f")
}, {
"duration": 1.0,
"texture": ExtResource("20_fht7w")
}, {
"duration": 1.0,
"texture": ExtResource("21_teqat")
}, {
"duration": 1.0,
"texture": ExtResource("22_5omlo")
}, {
"duration": 1.0,
"texture": ExtResource("23_ta1ce")
}, {
"duration": 1.0,
"texture": ExtResource("24_vlvb6")
}, {
"duration": 1.0,
"texture": ExtResource("25_qfycu")
}, {
"duration": 1.0,
"texture": ExtResource("26_yf826")
}, {
"duration": 1.0,
"texture": ExtResource("27_agx5j")
}, {
"duration": 1.0,
"texture": ExtResource("28_jivmv")
}, {
"duration": 1.0,
"texture": ExtResource("29_uosiw")
}, {
"duration": 1.0,
"texture": ExtResource("30_r5rso")
}, {
"duration": 1.0,
"texture": ExtResource("31_qe41b")
}, {
"duration": 1.0,
"texture": ExtResource("32_w28rw")
}],
"loop": true,
"name": &"idle",
"speed": 8.0
}]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_xj3kx"]

[node name="MarcieSprite" type="Node2D"]
script = ExtResource("2_0fk45")
play_style = "FAVOR_BAD_BOY"
npc_name = "marcie"
npc_display_name = "Marcie"
encounter_cooldown = 10.0

[node name="AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
material = SubResource("ShaderMaterial_l6sjs")
position = Vector2(0, -161)
sprite_frames = SubResource("SpriteFrames_3lblo")
animation = &"idle"
autoplay = "idle"
frame = 13
frame_progress = 0.999001

[node name="EncounterUI" type="Node2D" parent="."]
position = Vector2(0, -169)

[node name="StartEncounterLabel" type="Label" parent="EncounterUI"]
visible = false
offset_left = -123.0
offset_top = -213.0
offset_right = 140.0
offset_bottom = -138.0
theme_override_colors/font_color = Color(1, 1, 0, 1)
theme_override_colors/font_shadow_color = Color(0, 0, 0, 1)
theme_override_colors/font_outline_color = Color(0, 0, 0, 1)
theme_override_constants/line_spacing = 1
theme_override_constants/shadow_offset_x = 2
theme_override_constants/shadow_offset_y = 2
theme_override_constants/outline_size = 1
theme_override_fonts/font = ExtResource("3_yfalk")
theme_override_font_sizes/font_size = 30
text = "Start Encounter?"
horizontal_alignment = 1
vertical_alignment = 1
autowrap_mode = 3

[node name="Button" type="Button" parent="EncounterUI/StartEncounterLabel"]
self_modulate = Color(1, 1, 1, 0)
layout_mode = 0
offset_left = 64.0
offset_top = 6.0
offset_right = 184.0
offset_bottom = 388.0
autowrap_mode = 3

[node name="LevelLabel" type="Label" parent="EncounterUI"]
offset_left = -71.0
offset_top = -178.0
offset_right = 72.0
offset_bottom = -141.0
theme_override_colors/font_color = Color(1, 1, 0, 1)
theme_override_colors/font_shadow_color = Color(0, 0, 0, 1)
theme_override_colors/font_outline_color = Color(0, 0, 0, 1)
theme_override_constants/shadow_offset_x = 2
theme_override_constants/shadow_offset_y = 2
theme_override_fonts/font = ExtResource("3_yfalk")
theme_override_font_sizes/font_size = 30
text = "Level N"

[node name="StaticBody2D" type="StaticBody2D" parent="."]

[node name="CollisionShape2D" type="CollisionShape2D" parent="StaticBody2D"]
scale = Vector2(4.805, 1.095)
shape = SubResource("RectangleShape2D_xj3kx")

[node name="NpcDialogue" type="Node" parent="."]
script = ExtResource("4_yejwd")
dialogue_resource_string = "res://dialogue/main_dialogue.dialogue"
start_dialogue_tag = "marcie_challenge"
speaker_portrait_resource = "res://dialogue/portraits/marcie_portrait.png"
